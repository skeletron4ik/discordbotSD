import time
from asyncio import tasks
import disnake
from disnake.ext import commands, tasks
from datetime import datetime, timedelta
from pymongo import MongoClient
from datetime import datetime
from main import cluster

current_datetime = datetime.today()

collusers = cluster.server.users
collservers = cluster.server.servers
collbans = cluster.server.bans

emoji = "<a:rumbick_gif:1276856664842047518>"


def check_value(inter):
    result = collusers.update_one(
        {"id": inter.author.id, "guild_id": inter.guild.id, "settings": {"$exists": False}},
        {"$set": {}}
    )
    collusers.update_one(
        {"id": inter.author.id, "guild_id": inter.guild.id, 'settings.reputation_notification': {"$exists": False}},
        {"$set": {"settings.reputation_notification": True}})


class InfoCog(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @commands.slash_command(name='user-info', description='–í—ã–≤–æ–¥–∏—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ',
                            dm_permission=False)
    @commands.cooldown(rate=1, per=15, type=commands.BucketType.user)
    async def user(self, inter: disnake.ApplicationCommandInteraction, —É—á–∞—Å—Ç–Ω–∏–∫: disnake.Member = None):
        if inter.type == disnake.InteractionType.application_command:
            try:
                await inter.response.defer()
            except Exception as e:
                print(f"Error deferring response: {e}")
                return

        if —É—á–∞—Å—Ç–Ω–∏–∫ is None:
            —É—á–∞—Å—Ç–Ω–∏–∫ = inter.author
            settings = True

        embed = disnake.Embed(title=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ ``{—É—á–∞—Å—Ç–Ω–∏–∫.name}``:", url="",
                              description="", color=0x00b7ff, timestamp=datetime.now())
        embed.set_author(name=f"{—É—á–∞—Å—Ç–Ω–∏–∫.display_name}",
                         icon_url=f"https://media0.giphy.com/media/epyCv3K3uvRXw4LaPY/giphy.gif")
        embed.set_thumbnail(url=—É—á–∞—Å—Ç–Ω–∏–∫.avatar.url if —É—á–∞—Å—Ç–Ω–∏–∫.avatar else —É—á–∞—Å—Ç–Ω–∏–∫.default_avatar.url)

        def get_user_info(member):
            try:
                user_data = collusers.find_one({'id': member.id, 'guild_id': inter.guild.id})
                warns_count = user_data.get('warns', 0)
                if warns_count == 0:
                    warns_count = "–ù–µ –∏–º–µ–µ—Ç—Å—è"
                ban = user_data.get('ban', 'False')
                ban = '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if ban == 'True' else '–ù–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
                mute = '–ó–∞–º—É—á–µ–Ω' if member.current_timeout else '–ù–µ –∑–∞–º—É—á–µ–Ω'
                highest_role = sorted(member.roles, key=lambda r: r.position, reverse=True)[0]
                registration_time = member.created_at
                join_time = member.joined_at
                temporary_roles = user_data.get('role_ids', [])
                number_of_roles = user_data.get('number_of_roles', 0)
                if number_of_roles == 0:
                    number_of_roles = '–ù–µ –∏–º–µ–µ—Ç—Å—è'
                message_count = user_data.get('message_count', 0)
                time_in_voice = user_data.get('time_in_voice', 0)
                balance = round(user_data.get('balance', 0), 2)
                number_of_deal = user_data.get('number_of_deal', 0)
                reputation = user_data.get('reputation', 0)  # Get reputation

                return warns_count, ban, mute, highest_role, registration_time, join_time, temporary_roles, number_of_roles, message_count, time_in_voice, balance, number_of_deal, reputation
            except Exception as e:
                print(f"Error getting user info: {e}")
                return (0, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', None, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', [], 0, 0, 0, 0, 0, 0)

        warns_count, ban, mute, highest_role, registration_time, join_time, temporary_roles, number_of_roles, message_count, time_in_voice, balance, number_of_deal, reputation = get_user_info(
            —É—á–∞—Å—Ç–Ω–∏–∫)

        def get_reputation_title(reputation):
            if -9 <= reputation < 20:
                return "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π"
            elif 20 <= reputation <= 49:
                return "–•–æ—Ä–æ—à–∏–π"
            elif 50 <= reputation <= 99:
                return "–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–π"
            elif 100 <= reputation <= 159:
                return "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π"
            elif 160 <= reputation <= 229:
                return "–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π"
            elif 230 <= reputation <= 309:
                return "–£–≤–∞–∂–∞–µ–º—ã–π"
            elif 310 <= reputation <= 399:
                return "–ü–æ—Ç—Ä—è—Å–∞—é—â–∏–π"
            elif reputation >= 400:
                return "–ñ–∏–≤–∞—è –õ–µ–≥–µ–Ω–¥–∞"
            elif -10 >= reputation >= -19:
                return "–°–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–π"
            elif -20 >= reputation >= -29:
                return "–ü–ª–æ—Ö–æ–π"
            elif -30 >= reputation >= -39:
                return "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–π"
            elif -40 >= reputation >= -49:
                return "–£–∂–∞—Å–Ω—ã–π"
            elif -50 >= reputation >= -59:
                return "–û—Ç–≤—Ä–∞—Ç–∏—Ç–µ–ª—å–Ω—ã–π"
            elif -60 >= reputation >= -79:
                return "–ü—Ä–µ–∑–∏—Ä–∞–µ–º—ã–π"
            elif -80 >= reputation >= -99:
                return "–ò–∑–≥–æ–π"
            elif reputation <= -100:
                return "–í—Ä–∞–≥ –æ–±—â–µ—Å—Ç–≤–∞"
            else:
                return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"

        reputation_title = get_reputation_title(reputation)

        def format_time(seconds):
            days, seconds = divmod(seconds, 86400)
            hours, seconds = divmod(seconds, 3600)
            minutes, seconds = divmod(seconds, 60)

            time_components = []
            if days > 0:
                time_components.append(f'{int(days)} –¥')
            if hours > 0:
                time_components.append(f'{int(hours)} —á')
            if minutes > 0:
                time_components.append(f'{int(minutes)} –º–∏–Ω')
            if seconds > 0 or not time_components:
                time_components.append(f'{int(seconds)} —Å–µ–∫')

            return ', '.join(time_components)

        formatted_total_time = format_time(time_in_voice)

        def format_minutes(minutes):
            if 11 <= minutes % 100 <= 19:
                return "–º–∏–Ω—É—Ç"
            elif minutes % 10 == 1:
                return "–º–∏–Ω—É—Ç–∞"
            elif 2 <= minutes % 10 <= 4:
                return "–º–∏–Ω—É—Ç—ã"
            else:
                return "–º–∏–Ω—É—Ç"

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        status_dict = {
            disnake.Status.online: "üü¢ –í —Å–µ—Ç–∏",
            disnake.Status.offline: "‚ö´Ô∏è –ù–µ –≤ —Å–µ—Ç–∏",
            disnake.Status.idle: "üü° –ù–µ–∞–∫—Ç–∏–≤–µ–Ω",
            disnake.Status.dnd: "üî¥ –ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å"
        }
        status = status_dict.get(—É—á–∞—Å—Ç–Ω–∏–∫.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        voice_channel = —É—á–∞—Å—Ç–Ω–∏–∫.voice.channel.mention if —É—á–∞—Å—Ç–Ω–∏–∫.voice and —É—á–∞—Å—Ç–Ω–∏–∫.voice.channel else "–ù–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ"
        current_game = None
        for activity in —É—á–∞—Å—Ç–Ω–∏–∫.activities:
            if isinstance(activity, disnake.Game):
                current_game = activity.name
                break

        check_value(inter)
        query = {"id": inter.author.id, "guild_id": inter.guild_id}

        projection = {'_id': 0, "settings.reputation_notification": 1}

        result = collusers.find_one(query, projection)
        result = result["settings"]["reputation_notification"]
        print(result)
        if result:
            options = [
                disnake.SelectOption(label=f"üü¢ –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏",
                                     description="–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏. –°—Ç–∞—Ç—É—Å: üü¢", value="1"),
            ]
        else:
            options = [
                disnake.SelectOption(label=f"üî¥ –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± –∏–∑ –º–µ–Ω–µ–Ω–∏–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏",
                                     description="–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏. –°—Ç–∞—Ç—É—Å: üî¥", value="1"),
            ]

        # –°–æ–∑–¥–∞–µ–º select menu
        select_menu = disnake.ui.Select(
            placeholder="–ü–æ–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...",
            min_values=1,
            max_values=1,
            options=options,
        )

        async def select_callback(interaction: disnake.MessageInteraction):
            await interaction.response.defer(ephemeral=True)
            result2 = collusers.find_one(query, projection)
            result2 = result2["settings"]["reputation_notification"]
            if select_menu.values[0] == "1":
                if interaction.author.id != inter.author.id:
                    await interaction.followup.send('–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–ª–±–æ–µ–±–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞', ephemeral=True)
                if result2:
                    collusers.update_one(
                        {"id": interaction.author.id, "guild_id": interaction.guild.id},
                        {"$set": {"settings.reputation_notification": False}})
                    await interaction.followup.send('–≤—ã –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É (–≤—ã–∫–ª—é—á–µ–Ω–æ)', ephemeral=True)
                else:
                    collusers.update_one(
                        {"id": interaction.author.id, "guild_id": interaction.guild.id},
                        {"$set": {"settings.reputation_notification": True}})
                    await interaction.followup.send('–≤—ã –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É (–≤–∫–ª—é—á–µ–Ω–æ)', ephemeral=True)


                result1 = collusers.find_one(query, projection)
                result1 = result1["settings"]["reputation_notification"]

                if result1:
                    options1 = [
                        disnake.SelectOption(label=f"üü¢ –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏",
                                             description="–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏. –°—Ç–∞—Ç—É—Å: üü¢", value="1"),
                    ]
                else:
                    options1 = [
                        disnake.SelectOption(label=f"üî¥ –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± –∏–∑ –º–µ–Ω–µ–Ω–∏–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏",
                                             description="–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏. –°—Ç–∞—Ç—É—Å: üî¥", value="1"),
                    ]

                # –°–æ–∑–¥–∞–µ–º select menu
                select_menu1 = disnake.ui.Select(
                    placeholder="–ü–æ–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...",
                    min_values=1,
                    max_values=1,
                    options=options1,
                )

                select_menu1.callback = select_callback

                # –°–æ–∑–¥–∞–µ–º view –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–≥–æ select menu
                view1 = disnake.ui.View()
                view1.add_item(select_menu1)

                await inter.edit_original_response(embed=embed, view=view1)

        try:
            embed.add_field(name=f'',
                            value=f'**–û—Å–Ω–æ–≤–Ω–∞—è —Ä–æ–ª—å:** {highest_role.mention if highest_role else "``–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ``"}',
                            inline=False)
            embed.add_field(name=f'', value=f'**üëÅÔ∏è‚Äçüó®Ô∏è –°—Ç–∞—Ç—É—Å:** ``{status}``', inline=False)
            if —É—á–∞—Å—Ç–Ω–∏–∫.voice and —É—á–∞—Å—Ç–Ω–∏–∫.voice.channel:
                embed.add_field(name=f'',
                                value=f'**üîäÔ∏è –ì–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª:** {voice_channel}', inline=False)
            if current_game:
                embed.add_field(name=f'', value=f'**üéÆ –ò–≥—Ä–∞–µ—Ç –≤:** ``{current_game}``', inline=False)
            embed.add_field(name=f'',
                            value=f'**üåç –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:\n** <t:{int(registration_time.timestamp())}:F> (<t:{int(registration_time.timestamp())}:R>)',
                            inline=True)
            embed.add_field(name=f'',
                            value=f'**üåé –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è:\n** <t:{int(join_time.timestamp())}:F> (<t:{int(join_time.timestamp())}:R>)',
                            inline=True)
            embed.add_field(name='', value='', inline=False)
            if reputation >= 0:
                rep_emoji = "<:rep_up:1278690709855010856>"
            else:
                rep_emoji = "<:rep_down:1278690717652357201>"
            embed.add_field(name=f'', value=f'**‚≠ê –†–µ–ø—É—Ç–∞—Ü–∏—è:** ``{reputation}`` {rep_emoji} - ``{reputation_title}``',
                            inline=False)  # Add reputation field
            embed.add_field(name=f'', value=f'**üñäÔ∏è –°–æ–æ–±—â–µ–Ω–∏–π:\n** ``{message_count}``', inline=True)
            embed.add_field(name=f'',
                            value=f'**üé§ –ì–æ–ª–æ—Å–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:\n** ``{formatted_total_time}``',
                            # Using formatted time
                            inline=True)
            embed.add_field(name='', value='', inline=False)
            embed.add_field(name=f'', value=f'**üí∏ –ë–∞–ª–∞–Ω—Å:** ``{balance}``{emoji}', inline=True)
            embed.add_field(name=f'', value=f'**üíº –°–¥–µ–ª–æ–∫:** ``{number_of_deal}``', inline=True)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º —Å–µ–∫—Ü–∏–∏ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏, –±–∞–Ω–æ–º, –º—É—Ç–æ–º –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏
            if warns_count != "–ù–µ –∏–º–µ–µ—Ç—Å—è" or ban != "–ù–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" or mute != "–ù–µ –∑–∞–º—É—á–µ–Ω" or number_of_roles != "–ù–µ –∏–º–µ–µ—Ç—Å—è":
                embed.add_field(name=f'', value=f'-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-',
                                inline=False)
            if warns_count != "–ù–µ –∏–º–µ–µ—Ç—Å—è":
                embed.add_field(name=f'', value=f'**‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π:\n** ``{warns_count}``', inline=True)
            if ban != "–ù–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω":
                embed.add_field(name=f'', value=f'**üîí –ë–∞–Ω:\n** ``{ban}``', inline=True)
            if mute != "–ù–µ –∑–∞–º—É—á–µ–Ω":
                embed.add_field(name=f'', value=f'**üôä –ú—É—Ç:\n** ``{mute}``', inline=True)
            if number_of_roles != "–ù–µ –∏–º–µ–µ—Ç—Å—è":
                embed.add_field(name=f'', value=f'**üïí –í—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π:\n** ``{number_of_roles}``', inline=True)

            if temporary_roles:
                for role_info in temporary_roles:
                    role_id = role_info.get('role_ids')
                    expires_at = role_info.get('expires_at')
                    role = inter.guild.get_role(role_id)
                    if role:
                        embed.add_field(
                            name=f'',
                            value=f'{role.mention} - –∏—Å—Ç–µ–∫–∞–µ—Ç: <t:{int(expires_at)}:R>',
                            inline=False
                        )
            embed.set_footer(text=f'ID: {—É—á–∞—Å—Ç–Ω–∏–∫.id}')

            if —É—á–∞—Å—Ç–Ω–∏–∫ != True:
                select_menu.callback = select_callback

                # –°–æ–∑–¥–∞–µ–º view –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–≥–æ select menu
                view = disnake.ui.View()
                view.add_item(select_menu)

                await inter.edit_original_response(embed=embed, view=view)
            else:
                await inter.edit_original_response(embed=embed)
        except Exception as e:
            print(f"Error editing response: {e}")

            if —É—á–∞—Å—Ç–Ω–∏–∫ is None:
                select_menu.callback = select_callback

                # –°–æ–∑–¥–∞–µ–º view –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–≥–æ select menu
                view = disnake.ui.View()
                view.add_item(select_menu)

                await inter.response.send_message(embed=embed, ephemeral=True, view=view)
            else:
                await inter.response.send_message(embed=embed, ephemeral=True)


def setup(bot):
    bot.add_cog(InfoCog(bot))
    print("InfoCog is ready")
