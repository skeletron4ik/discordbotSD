import disnake
from disnake.ext import commands
import random
from pymongo import MongoClient, errors, collection
from main import cluster, create_error_embed
from datetime import datetime, timedelta
from ai.process_role import process_role
import asyncio
from .economy import format_duration, format_rumbick, emoji
from disnake import ui

last_spin_times = {}

collusers = cluster.server.users
collservers = cluster.server.servers


def check_value(inter):
    result = collusers.update_one(
        {"id": inter.author.id, "guild_id": inter.guild.id, "keys": {"$exists": False}},
        {"$set": {"keys": 0}}  # –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è age
    )
def seconds_to_dhm(seconds):
    days = seconds // 86400  # 86400 —Å–µ–∫—É–Ω–¥ –≤ –æ–¥–Ω–æ–º –¥–Ω–µ
    hours = (seconds % 86400) // 3600  # 3600 —Å–µ–∫—É–Ω–¥ –≤ –æ–¥–Ω–æ–º —á–∞—Å–µ
    minutes = (seconds % 3600) // 60  # 60 —Å–µ–∫—É–Ω–¥ –≤ –æ–¥–Ω–æ–π –º–∏–Ω—É—Ç–µ

    return int(days), int(hours), int(minutes)

class RewardsView(ui.View):
    def __init__(self, cog, inter, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.cog = cog
        self.inter = inter
        self.sorted = False

    @ui.button(label="‚ôªÔ∏è –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —à–∞–Ω—Å–∞–º", style=disnake.ButtonStyle.green)
    async def sort_button(self, button: ui.Button, interaction: disnake.MessageInteraction):
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        self.sorted = not self.sorted
        button.label = "‚ôªÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –≤ –æ–±—ã—á–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ" if self.sorted else "‚ôªÔ∏è –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —à–∞–Ω—Å–∞–º"

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–≥—Ä–∞–¥ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        roulette_options = self.cog.get_roulette_options()
        if self.sorted:
            roulette_options = sorted(roulette_options, key=lambda x: x['chance'], reverse=True)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–≥—Ä–∞–¥
        formatted_list = self.cog.format_rewards_list(roulette_options)

        # –û–±–Ω–æ–≤–ª—è–µ–º —ç–º–±–µ–¥
        embed = disnake.Embed(
            title="–°–ø–∏—Å–æ–∫ –Ω–∞–≥—Ä–∞–¥ –∏ –∏—Ö —à–∞–Ω—Å—ã",
            description=formatted_list,
            color=0xffff00,
            timestamp=datetime.now()
        )
        embed.set_thumbnail(url='https://i.pinimg.com/originals/f2/43/fc/f243fcb6032c81ca9870d098ee7587ba.gif')
        embed.set_footer(text="–£–¥–∞—á–∏!", icon_url=self.inter.guild.icon.url)

        await interaction.response.edit_message(embed=embed, view=self)

class RouletteCog(commands.Cog):

    def __init__(self, bot):
        self.bot = bot
        self.allowed_channel_id = 1279413707981455422

    def get_roulette_options(self):
        return [
            {'name': 'üòî –ü—É—Å—Ç–æ', 'chance': 7, 'field': 'none', 'value': None},
            {'name': 'üîá –ú—É—Ç –æ—Ç 1 –¥–æ 10 –º–∏–Ω—É—Ç', 'chance': 3.7, 'field': 'mute', 'value': (1, 10)},
            {'name': 'üîá –ú—É—Ç –æ—Ç 10 –¥–æ 20 –º–∏–Ω—É—Ç', 'chance': 2.5, 'field': 'mute', 'value': (10, 20)},
            {'name': 'üîá –ú—É—Ç –æ—Ç 20 –¥–æ 40 –º–∏–Ω—É—Ç', 'chance': 0.7, 'field': 'mute', 'value': (20, 40)},
            {'name': f'{emoji} –û—Ç 1 –¥–æ 25', 'chance': 16.4, 'field': 'currency', 'value': (1, 25)},
            {'name': f'{emoji} –û—Ç 25 –¥–æ 50', 'chance': 12.7, 'field': 'currency', 'value': (25, 50)},
            {'name': f'{emoji} –û—Ç 50 –¥–æ 100', 'chance': 5.3, 'field': 'currency', 'value': (50, 100)},
            {'name': f'{emoji} –û—Ç 100 –¥–æ 200', 'chance': 2.5, 'field': 'currency', 'value': (100, 200)},
            {'name': f'{emoji} –û—Ç 200 –¥–æ 500', 'chance': 0.75, 'field': 'currency', 'value': (200, 500)},
            {'name': f'{emoji} –û—Ç 500 –¥–æ 1000', 'chance': 0.3, 'field': 'currency', 'value': (500, 1000)},
            {'name': f'{emoji} –û—Ç 1000 –¥–æ 2000', 'chance': 0.04, 'field': 'currency', 'value': (1000, 2000)},
            {'name': f'{emoji} –û—Ç 2000 –¥–æ 3000', 'chance': 0.01, 'field': 'currency', 'value': (2000, 3000)},
            {'name': f'{emoji} –û—Ç 3000 –¥–æ 4000', 'chance': 0.005, 'field': 'currency', 'value': (3000, 4000)},
            {'name': f'{emoji} –û—Ç 4000 –¥–æ 5000', 'chance': 0.001, 'field': 'currency', 'value': (4000, 5000)},
            {'name': '‚≠êÔ∏è Gold –Ω–∞ 1-3 –¥–Ω—è', 'chance': 12, 'field': 'gold', 'value': (1, 3)},
            {'name': '‚≠êÔ∏è Gold –Ω–∞ 3-7 –¥–Ω–µ–π', 'chance': 9, 'field': 'gold', 'value': (3, 7)},
            {'name': '‚≠êÔ∏è Gold –Ω–∞ 7-14 –¥–Ω–µ–π', 'chance': 5, 'field': 'gold', 'value': (7, 14)},
            {'name': '‚≠êÔ∏è Gold –Ω–∞ 14-30 –¥–Ω–µ–π', 'chance': 2, 'field': 'gold', 'value': (14, 30)},
            {'name': '‚≠êÔ∏è Gold –Ω–∞ 30-60 –¥–Ω–µ–π', 'chance': 0.7, 'field': 'gold', 'value': (30, 60)},
            {'name': '‚≠êÔ∏è Gold –Ω–∞ 60-90 –¥–Ω–µ–π', 'chance': 0.2, 'field': 'gold', 'value': (60, 90)},
            {'name': '‚≠êÔ∏è Gold –Ω–∞ 90-180 –¥–Ω–µ–π', 'chance': 0.05, 'field': 'gold', 'value': (90, 180)},
            {'name': 'üíé Diamond –Ω–∞ 1-3 –¥–Ω—è', 'chance': 6, 'field': 'diamond', 'value': (1, 3)},
            {'name': 'üíé Diamond –Ω–∞ 3-7 –¥–Ω–µ–π', 'chance': 4.5, 'field': 'diamond', 'value': (3, 7)},
            {'name': 'üíé Diamond –Ω–∞ 7-14 –¥–Ω–µ–π', 'chance': 2.5, 'field': 'diamond', 'value': (7, 14)},
            {'name': 'üíé Diamond –Ω–∞ 14-30 –¥–Ω–µ–π', 'chance': 1, 'field': 'diamond', 'value': (14, 30)},
            {'name': 'üíé Diamond –Ω–∞ 30-60 –¥–Ω–µ–π', 'chance': 0.35, 'field': 'diamond', 'value': (30, 60)},
            {'name': 'üíé Diamond –Ω–∞ 60-90 –¥–Ω–µ–π', 'chance': 0.06, 'field': 'diamond', 'value': (60, 90)},
            {'name': 'üíé Diamond –Ω–∞ 90-180 –¥–Ω–µ–π', 'chance': 0.01, 'field': 'diamond', 'value': (90, 180)},
            {'name': 'üîë –û—Ç 1 –¥–æ 3', 'chance': 2.2, 'field': 'keys', 'value': (1, 3)},
            {'name': 'üîë –û—Ç 3 –¥–æ 5', 'chance': 1.5, 'field': 'keys', 'value': (3, 5)},
            {'name': 'üîë –û—Ç 5 –¥–æ 10', 'chance': 0.8, 'field': 'keys', 'value': (5, 10)},
            {'name': 'üîë –û—Ç 10 –¥–æ 30', 'chance': 0.07, 'field': 'keys', 'value': (10, 30)},
            {'name': 'üîë –û—Ç 30 –¥–æ 60', 'chance': 0.02, 'field': 'keys', 'value': (30, 60)},
            {'name': 'üîë –û—Ç 60 –¥–æ 100', 'chance': 0.007, 'field': 'keys', 'value': (60, 100)}
        ]

    def format_rewards_list(self, options):
        formatted_list = ""
        for option in options:
            formatted_list += f"**{option['name']}** ‚Äî ``{option['chance']}%``\n"
        return formatted_list

    @commands.slash_command(name="mystery-box", description="–ó–∞–≥–∞–¥–æ—á–Ω—ã–π —è—â–∏–∫ —Å –Ω–∞–≥—Ä–∞–¥–∞–º–∏")
    @commands.cooldown(rate=1, per=5, type=commands.BucketType.user)
    async def mystery_box(self, inter: disnake.ApplicationCommandInteraction):
        pass

    @mystery_box.sub_command(name='open', description='–û—Ç–∫—Ä—ã—Ç—å –∑–∞–≥–∞–¥–æ—á–Ω—ã–π —è—â–∏–∫')
    @commands.cooldown(rate=1, per=5, type=commands.BucketType.user)
    async def open_box(self, inter: disnake.ApplicationCommandInteraction):
        check_value(inter)

        if collusers.find_one({'id': inter.author.id, 'guild_id': inter.author.guild.id})['keys'] <= 0:
            await inter.send('–£ –í–∞—Å –Ω–µ—Ç –∫–ª—é—á–µ–π.', ephemeral=True)
            return
        else:
            collusers.update_one(
                {'id': inter.author.id, 'guild_id': inter.author.guild.id},
                {'$inc': {'keys': -1, 'opened_cases': 1}},
                upsert=True
            )
            collservers.update_one(
                {"_id": inter.guild.id},
                {"$inc": {"opened_cases": 1}},
                upsert=True
            )

        roulette_options = self.get_roulette_options()

        # –°–æ–∑–¥–∞—ë–º –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        scale_factor = 100  # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —à–∞–Ω—Å—ã
        weighted_items = []
        for option in roulette_options:
            scaled_chance = int(option['chance'] * scale_factor)
            if scaled_chance > 0:
                weighted_items.extend([option] * scaled_chance)

        # –ï—Å–ª–∏ —à–∞–Ω—Å—ã –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä–∞–≤–Ω—ã 0, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
        if not weighted_items:
            return None

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        selected_option = random.choice(weighted_items)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–ª—è
        if isinstance(selected_option['value'], tuple):
            if selected_option['field'] == 'keys':
                prize_value = random.randint(*selected_option['value'])
            else:
                prize_value = round(random.uniform(*selected_option['value']), 2)
                if selected_option['field'] in ['gold', 'diamond']:
                    prize_value = int(prize_value * 86400)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥—ã
        else:
            prize_value = selected_option['value']

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–∏–≥—Ä—ã—à–µ
        prize = {
            "name": selected_option['name'],
            "field": selected_option['field'],
            "value": prize_value
        }

        embed_loading = disnake.Embed(title="–û—Ç–∫—Ä—ã–≤–∞–µ–º Mystery Box...", color=0x00ff00, timestamp=datetime.now())
        embed_loading.set_image(url='https://media.tenor.com/6BWKxLc307kAAAAj/gift-box.gif')
        await inter.send(embed=embed_loading, ephemeral=True)

        await asyncio.sleep(4.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 4.5 —Å–µ–∫—É–Ω–¥—ã

        if prize['field'] == 'currency':
            collusers.find_one_and_update(
                {'id': inter.author.id, 'guild_id': inter.author.guild.id},
                {'$inc': {'balance': prize['value']}}
            )
            prize_text = f"{prize['value']}{emoji}"
        elif prize['field'] == 'diamond':
            role_id = 1044314368717897868
            await process_role(inter, self.bot, 0, prize['value'], role_id, ephemeral=True)
            days, hours, minutes = seconds_to_dhm(prize['value'])
            formatted_time = f"`{days} –¥–Ω–µ–π –∏ {hours} —á–∞—Å–æ–≤`"
            role = inter.guild.get_role(role_id)
            prize_text = f"–†–æ–ª—å {role.mention} –Ω–∞ {formatted_time}"
        elif prize['field'] == 'gold':
            role_id = 1303396950481174611
            await process_role(inter, self.bot, 0, prize['value'], role_id, ephemeral=True)
            days, hours, minutes = seconds_to_dhm(prize['value'])
            formatted_time = f"`{days} –¥–Ω–µ–π –∏ {hours} —á–∞—Å–æ–≤`"
            role = inter.guild.get_role(role_id)
            prize_text = f"–†–æ–ª—å {role.mention} –Ω–∞ {formatted_time}"
        elif prize['field'] == 'mute':
            try:
                dur = timedelta(minutes=prize['value'])
                await inter.author.timeout(duration=dur)
                prize_text = f"–ú—É—Ç –Ω–∞ ``{prize['value']} –º–∏–Ω—É—Ç`` üîá"
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–∞–π–º–∞—É—Ç–∞: {e}")
                prize_text = "–û—à–∏–±–∫–∞ —Å –º—É—Ç–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        elif prize['field'] == 'keys':
            collusers.find_one_and_update(
                {'id': inter.author.id, 'guild_id': inter.author.guild.id},
                {'$inc': {'keys': prize['value']}}
            )
            prize_text = f"{prize['value']} –∫–ª—é—á–µ–π üîë"

        elif prize['field'] == 'none':
            prize_text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è—â–∏–∫ –æ–∫–∞–∑–∞–ª—Å—è –ø—É—Å—Ç—ã–º üòî"

        else:
            # –ï—Å–ª–∏ —Ç–∏–ø –Ω–∞–≥—Ä–∞–¥—ã –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            prize_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        embed = disnake.Embed(title="–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã–ª–∏ Mystery Box!", color=0xffff00, timestamp=datetime.now())
        embed.set_thumbnail(url='https://i.pinimg.com/originals/f2/43/fc/f243fcb6032c81ca9870d098ee7587ba.gif')
        embed.add_field(name="–í–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞:", value=f'{prize_text}.', inline=False)
        keys = collusers.find_one({'id': inter.author.id, 'guild_id': inter.author.guild.id})['keys']
        embed.set_footer(text=f'–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å: {keys}üîë', icon_url=inter.guild.icon.url)
        await inter.edit_original_message(embed=embed)

    @mystery_box.sub_command(name='list', description='–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥')
    @commands.cooldown(rate=1, per=15, type=commands.BucketType.user)
    async def list_rewards(self, inter: disnake.ApplicationCommandInteraction):
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞–≥—Ä–∞–¥
        roulette_options = self.get_roulette_options()
        formatted_list = self.format_rewards_list(roulette_options)

        # –°–æ–∑–¥–∞—ë–º —ç–º–±–µ–¥
        embed = disnake.Embed(
            title="–°–ø–∏—Å–æ–∫ –Ω–∞–≥—Ä–∞–¥ –∏ –∏—Ö —à–∞–Ω—Å—ã",
            description=formatted_list,
            color=0xffff00,
            timestamp=datetime.now()
        )
        embed.set_thumbnail(url='https://i.pinimg.com/originals/f2/43/fc/f243fcb6032c81ca9870d098ee7587ba.gif')
        embed.set_footer(text="–£–¥–∞—á–∏!", icon_url=inter.guild.icon.url)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ RewardsView
        view = RewardsView(self, inter)
        await inter.send(embed=embed, view=view, ephemeral=True)


def setup(bot):
    bot.add_cog(RouletteCog(bot))
    print('Roulette Cog is Ready!')
