import disnake
from disnake.ext import commands
from datetime import datetime
from main import cluster
from .userinfo import omegabox_emoji, ticket_emoji

collusers = cluster.server.users
collservers = cluster.server.servers


class TopEnum(disnake.enums.Enum):
    –†—É–º–±–∏–∫–∏ = "–†—É–º–±–∏–∫–∏"
    –í–æ–π—Å = "–í–æ–π—Å"
    –°–æ–æ–±—â–µ–Ω–∏—è = '–°–æ–æ–±—â–µ–Ω–∏—è'
    –°–¥–µ–ª–∫–∏ = '–°–¥–µ–ª–∫–∏'
    –†–µ–ø—É—Ç–∞—Ü–∏—è = '–†–µ–ø—É—Ç–∞—Ü–∏—è'
    –ë–∞–º–ø—ã = '–ë–∞–º–ø—ã'
    –ö–ª—é—á–∏ = '–ö–ª—é—á–∏'
    MysteryBox = 'MysteryBox'
    –ü—Ä–æ–º–æ–∫–æ–¥—ã = '–ü—Ä–æ–º–æ–∫–æ–¥—ã'


class TopCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    def get_top_users(self, skip=0, limit=10):
        top_records = collusers.find().sort('balance', -1).skip(skip).limit(limit)
        return [(record['id'], record['balance']) for record in top_records]

    def get_top_users_voice(self, skip=0, limit=10):
        top_records = collusers.find().sort('time_in_voice', -1).skip(skip).limit(limit)
        return [(record['id'], record['time_in_voice']) for record in top_records]

    def get_top_users_message_count(self, skip=0, limit=10):
        top_records = collusers.find().sort('message_count', -1).skip(skip).limit(limit)
        return [(record['id'], record['message_count']) for record in top_records]

    def get_top_users_deals(self, skip=0, limit=10):
        top_records = collusers.find().sort('number_of_deal', -1).skip(skip).limit(limit)
        return [(record['id'], record['number_of_deal']) for record in top_records]

    def get_top_users_reputation(self, skip=0, limit=10):
        top_records = collusers.find({"reputation": {"$ne": 0}}).sort('reputation', -1).skip(skip).limit(limit)
        return [(record['id'], record['reputation']) for record in top_records]

    def get_top_users_bumps(self, skip=0, limit=10):
        top_records = collusers.find().sort('bumps', -1).skip(skip).limit(limit)
        return [(record['id'], record['bumps']) for record in top_records]

    def get_top_users_keys(self, skip=0, limit=10):
        top_records = collusers.find().sort('keys', -1).skip(skip).limit(limit)
        return [(record['id'], record['keys']) for record in top_records]

    def get_top_users_opened_cases(self, skip=0, limit=10):
        top_records = collusers.find().sort('opened_cases', -1).skip(skip).limit(limit)
        return [(record['id'], record['opened_cases']) for record in top_records]

    def get_top_users_promocodes(self, skip=0, limit=10):
        top_records = collusers.find().sort('promocodes', -1).skip(skip).limit(limit)
        return [(record['id'], record['promocodes']) for record in top_records]


    def seconds_to_dhm(self, seconds):
        days = seconds // 86400  # 86400 —Å–µ–∫—É–Ω–¥ –≤ –æ–¥–Ω–æ–º –¥–Ω–µ
        hours = (seconds % 86400) // 3600  # 3600 —Å–µ–∫—É–Ω–¥ –≤ –æ–¥–Ω–æ–º —á–∞—Å–µ
        minutes = (seconds % 3600) // 60  # 60 —Å–µ–∫—É–Ω–¥ –≤ –æ–¥–Ω–æ–π –º–∏–Ω—É—Ç–µ
        days = round(days, 0)
        hours = round(hours, 0)
        minutes = round(minutes, 0)

        return days, hours, minutes

    def position_emoji(self, idx):
        if idx == 1:
            return "ü•á"
        elif idx == 2:
            return "ü•à"
        elif idx == 3:
            return "ü•â"
        else:
            return ""

    def get_reputation_title(self, reputation):
        if -9 <= reputation < 20:
            return "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π"
        elif 20 <= reputation <= 49:
            return "–•–æ—Ä–æ—à–∏–π"
        elif 50 <= reputation <= 99:
            return "–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–π"
        elif 100 <= reputation <= 159:
            return "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π"
        elif 160 <= reputation <= 229:
            return "–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π"
        elif 230 <= reputation <= 309:
            return "–£–≤–∞–∂–∞–µ–º—ã–π"
        elif 310 <= reputation <= 399:
            return "–ü–æ—Ç—Ä—è—Å–∞—é—â–∏–π"
        elif reputation >= 400:
            return "–ñ–∏–≤–∞—è –õ–µ–≥–µ–Ω–¥–∞"
        elif -10 >= reputation >= -19:
            return "–°–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–π"
        elif -20 >= reputation >= -29:
            return "–ü–ª–æ—Ö–æ–π"
        elif -30 >= reputation >= -39:
            return "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–π"
        elif -40 >= reputation >= -49:
            return "–£–∂–∞—Å–Ω—ã–π"
        elif -50 >= reputation >= -59:
            return "–û—Ç–≤—Ä–∞—Ç–∏—Ç–µ–ª—å–Ω—ã–π"
        elif -60 >= reputation >= -79:
            return "–ü—Ä–µ–∑–∏—Ä–∞–µ–º—ã–π"
        elif -80 >= reputation >= -99:
            return "–ò–∑–≥–æ–π"
        elif reputation <= -100:
            return "–í—Ä–∞–≥ –æ–±—â–µ—Å—Ç–≤–∞"
        else:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"  # Default title for other values

    class TopView(disnake.ui.View):
        def __init__(self, cog, top_type: TopEnum, page=1):
            super().__init__(timeout=None)
            self.cog = cog
            self.top_type = top_type
            self.page = page
            self.items_per_page = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É

            previous_button = disnake.ui.Button(label="‚¨ÖÔ∏è", style=disnake.ButtonStyle.primary, custom_id='previous',
                                                disabled=True)
            previous_button.callback = self.previous_page
            self.add_item(previous_button)

            next_button = disnake.ui.Button(label="‚û°Ô∏è", style=disnake.ButtonStyle.primary, custom_id='next')
            next_button.callback = self.next_page
            self.add_item(next_button)

            self.original_message = None

        async def update_embed(self, interaction):
            skip = (self.page - 1) * self.items_per_page
            if self.page != 1:
                for child in self.children:
                    if isinstance(child, disnake.ui.Button) and child.custom_id == "previous":
                        child.disabled = False

            if self.top_type == '–†—É–º–±–∏–∫–∏':
                top_users = self.cog.get_top_users(skip, self.items_per_page)
                embed = disnake.Embed(title="üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —Ä—É–º–±–∏–∫–∞–º", color=0xffff00, timestamp=datetime.now())
                embed.set_thumbnail(url='https://i.imgur.com/64ibjZo.gif')
                if top_users:
                    for idx, (user_id, balance) in enumerate(top_users, start=skip + 1):
                        member = interaction.guild.get_member(user_id)
                        position_emoji = self.cog.position_emoji(idx)
                        emoji = "<a:rumbick:1271085088142262303>"
                        if balance == 0:
                            for child in self.children:
                                if isinstance(child, disnake.ui.Button) and child.custom_id == "next":
                                    child.disabled = True
                            await interaction.edit_original_message(view=self)

                        if member and not balance == 0:
                            balance = round(balance, 2)
                            embed.add_field(name=f"{position_emoji} ``#{idx}``. {member.display_name}",
                                            value=f"–ë–∞–ª–∞–Ω—Å: {balance}{emoji}", inline=False)
                        elif not balance == 0:
                            balance = round(balance, 2)
                            embed.add_field(name=f"``#{idx}``. ~~–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ (ID: {user_id})~~",
                                            value=f"–ë–∞–ª–∞–Ω—Å: {balance}{emoji}", inline=False)

            elif self.top_type == '–í–æ–π—Å':
                top_users = self.cog.get_top_users_voice(skip, self.items_per_page)
                embed = disnake.Embed(title="üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –≤–æ–π—Å–µ", color=0xffff00,
                                      timestamp=datetime.now())
                embed.set_thumbnail(url='https://i.imgur.com/64ibjZo.gif')
                if top_users:
                    for idx, (user_id, time_in_voice) in enumerate(top_users, start=skip + 1):
                        member = interaction.guild.get_member(user_id)
                        position_emoji = self.cog.position_emoji(idx)
                        emoji = "üé§"
                        if time_in_voice <= 60:
                            for child in self.children:
                                if isinstance(child, disnake.ui.Button) and child.custom_id == "next":
                                    child.disabled = True
                            await interaction.edit_original_message(view=self)

                        if member and not time_in_voice == 0:
                            days, hours, minutes = self.cog.seconds_to_dhm(time_in_voice)
                            embed.add_field(name=f"{position_emoji} ``#{idx}``. {member.display_name}",
                                            value=f"–í—Ä–µ–º—è –≤ –≤–æ–π—Å–µ: ``{days} –¥. {hours} —á. {minutes} –º.`` {emoji}",
                                            inline=False)
                        elif not time_in_voice == 0:
                            days, hours, minutes = self.cog.seconds_to_dhm(time_in_voice)
                            embed.add_field(name=f"``#{idx}``. ~~–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ (ID: {user_id})~~",
                                            value=f"–í—Ä–µ–º—è –≤ –≤–æ–π—Å–µ: ``{days} –¥. {hours} —á. {minutes} –º.`` {emoji}",
                                            inline=False)

            elif self.top_type == '–°–æ–æ–±—â–µ–Ω–∏—è':
                top_users = self.cog.get_top_users_message_count(skip, self.items_per_page)
                embed = disnake.Embed(title="üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º", color=0xffff00,
                                      timestamp=datetime.now())
                embed.set_thumbnail(url='https://i.imgur.com/64ibjZo.gif')
                if top_users:
                    for idx, (user_id, message_count) in enumerate(top_users, start=skip + 1):
                        member = interaction.guild.get_member(user_id)
                        position_emoji = self.cog.position_emoji(idx)
                        emoji = "üí¨"
                        if message_count < 1:
                            for child in self.children:
                                if isinstance(child, disnake.ui.Button) and child.custom_id == "next":
                                    child.disabled = True
                            await interaction.edit_original_message(view=self)

                        if member and not message_count == 0:
                            embed.add_field(name=f"{position_emoji} ``#{idx}``. {member.display_name}",
                                            value=f"–°–æ–æ–±—â–µ–Ω–∏—è: **{message_count}** {emoji}", inline=False)
                        elif not message_count == 0:
                            embed.add_field(name=f"``#{idx}``. ~~–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ (ID: {user_id})~~",
                                            value=f"–°–æ–æ–±—â–µ–Ω–∏—è: **{message_count}** {emoji}", inline=False)

            elif self.top_type == '–°–¥–µ–ª–∫–∏':
                top_users = self.cog.get_top_users_deals(skip, self.items_per_page)
                embed = disnake.Embed(title="üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —Å–¥–µ–ª–∫–∞–º", color=0xffff00, timestamp=datetime.now())
                embed.set_thumbnail(url='https://i.imgur.com/64ibjZo.gif')
                if top_users:
                    for idx, (user_id, number_of_deal) in enumerate(top_users, start=skip + 1):
                        member = interaction.guild.get_member(user_id)
                        position_emoji = self.cog.position_emoji(idx)
                        emoji = "üíº"
                        if number_of_deal < 1:
                            for child in self.children:
                                if isinstance(child, disnake.ui.Button) and child.custom_id == "next":
                                    child.disabled = True
                            await interaction.edit_original_message(view=self)

                        if member and not number_of_deal == 0:
                            embed.add_field(name=f"{position_emoji} ``#{idx}``. {member.display_name}",
                                            value=f"–°–¥–µ–ª–∫–∏: **{number_of_deal}** {emoji}", inline=False)
                        elif not number_of_deal == 0:
                            embed.add_field(name=f"``#{idx}``. ~~–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ (ID: {user_id})~~",
                                            value=f"–°–¥–µ–ª–∫–∏: **{number_of_deal}** {emoji}", inline=False)

            elif self.top_type == '–†–µ–ø—É—Ç–∞—Ü–∏—è':
                top_users = self.cog.get_top_users_reputation(skip, self.items_per_page)
                embed = disnake.Embed(title="üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏", color=0xffff00, timestamp=datetime.now())
                embed.set_thumbnail(url='https://i.imgur.com/64ibjZo.gif')
                if top_users:
                    for idx, (user_id, reputation) in enumerate(top_users, start=skip + 1):
                        member = interaction.guild.get_member(user_id)
                        position_emoji = self.cog.position_emoji(idx)
                        if reputation > 0:
                            emoji = "<:rep_up:1234218072433365102>"
                        else:
                            emoji = "<:rep_down:1234218095116288154>"

                        title = self.cog.get_reputation_title(reputation)
                        if member:
                            embed.add_field(name=f"{position_emoji} ``#{idx}``. {member.display_name}",
                                            value=f"–†–µ–ø—É—Ç–∞—Ü–∏—è: **{reputation}** {emoji} - ``{title}``", inline=False)
                        else:
                            embed.add_field(name=f"``#{idx}``. ~~–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ (ID: {user_id})~~",
                                            value=f"–†–µ–ø—É—Ç–∞—Ü–∏—è: **{reputation}** {emoji} - ``{title}``", inline=False)


            elif self.top_type == '–ë–∞–º–ø—ã':
                top_users = self.cog.get_top_users_bumps(skip, self.items_per_page)
                embed = disnake.Embed(title="üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –±–∞–º–ø–∞–º", color=0xffff00, timestamp=datetime.now())
                embed.set_thumbnail(url='https://i.imgur.com/64ibjZo.gif')
                if top_users:
                    for idx, (user_id, bumps) in enumerate(top_users, start=skip + 1):
                        member = interaction.guild.get_member(user_id)
                        position_emoji = self.cog.position_emoji(idx)
                        emoji = "üÜô"
                        if bumps < 1:
                            for child in self.children:
                                if isinstance(child, disnake.ui.Button) and child.custom_id == "next":
                                    child.disabled = True
                            await interaction.edit_original_message(view=self)

                        if member and not bumps == 0:
                            embed.add_field(name=f"{position_emoji} ``#{idx}``. {member.display_name}",
                                            value=f"–ë–∞–º–ø–æ–≤: **{bumps}** {emoji}", inline=False)
                        elif not bumps == 0:
                            embed.add_field(name=f"``#{idx}``. ~~–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ (ID: {user_id})~~",
                                            value=f"–ë–∞–º–ø–æ–≤: **{bumps}** {emoji}", inline=False)

            elif self.top_type == '–ö–ª—é—á–∏':
                top_users = self.cog.get_top_users_keys(skip, self.items_per_page)
                embed = disnake.Embed(title="üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –∫–ª—é—á–∞–º", color=0xffff00, timestamp=datetime.now())
                embed.set_thumbnail(url='https://i.imgur.com/64ibjZo.gif')
                if top_users:
                    for idx, (user_id, keys) in enumerate(top_users, start=skip + 1):
                        member = interaction.guild.get_member(user_id)
                        position_emoji = self.cog.position_emoji(idx)
                        emoji = "üîëÔ∏è"
                        if keys < 1:
                            for child in self.children:
                                if isinstance(child, disnake.ui.Button) and child.custom_id == "next":
                                    child.disabled = True
                            await interaction.edit_original_message(view=self)

                        if member and not keys == 0:
                            embed.add_field(name=f"{position_emoji} ``#{idx}``. {member.display_name}",
                                            value=f"–ö–ª—é—á–∏: **{keys}** {emoji}", inline=False)
                        elif not keys == 0:
                            embed.add_field(name=f"``#{idx}``. ~~–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ (ID: {user_id})~~",
                                            value=f"–ö–ª—é—á–∏: **{keys}** {emoji}", inline=False)

            elif self.top_type == 'MysteryBox':
                top_users = self.cog.get_top_users_opened_cases(skip, self.items_per_page)
                embed = disnake.Embed(title="üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –æ—Ç–∫—Ä—ã—Ç—ã–º MysteryBox", color=0xffff00, timestamp=datetime.now())
                embed.set_thumbnail(url='https://i.imgur.com/64ibjZo.gif')
                if top_users:
                    for idx, (user_id, opened_cases) in enumerate(top_users, start=skip + 1):
                        member = interaction.guild.get_member(user_id)
                        position_emoji = self.cog.position_emoji(idx)
                        emoji = "üéÅ"
                        if opened_cases < 1:
                            for child in self.children:
                                if isinstance(child, disnake.ui.Button) and child.custom_id == "next":
                                    child.disabled = True
                            await interaction.edit_original_message(view=self)

                        if member and not opened_cases == 0:
                            embed.add_field(name=f"{position_emoji} ``#{idx}``. {member.display_name}",
                                            value=f"MysteryBox: **{opened_cases}** {omegabox_emoji}", inline=False)
                        elif not opened_cases == 0:
                            embed.add_field(name=f"``#{idx}``. ~~–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ (ID: {user_id})~~",
                                            value=f"MysteryBox: **{opened_cases}** {omegabox_emoji}", inline=False)

            elif self.top_type == '–ü—Ä–æ–º–æ–∫–æ–¥—ã':
                top_users = self.cog.get_top_users_promocodes(skip, self.items_per_page)
                embed = disnake.Embed(title="üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º", color=0xffff00, timestamp=datetime.now())
                embed.set_thumbnail(url='https://i.imgur.com/64ibjZo.gif')
                if top_users:
                    for idx, (user_id, promocodes) in enumerate(top_users, start=skip + 1):
                        member = interaction.guild.get_member(user_id)
                        position_emoji = self.cog.position_emoji(idx)
                        emoji = "üéüÔ∏è"
                        if promocodes < 1:
                            for child in self.children:
                                if isinstance(child, disnake.ui.Button) and child.custom_id == "next":
                                    child.disabled = True
                            await interaction.edit_original_message(view=self)

                        if member and not promocodes == 0:
                            embed.add_field(name=f"{position_emoji} ``#{idx}``. {member.display_name}",
                                            value=f"–ü—Ä–æ–º–æ–∫–æ–¥—ã: **{promocodes}** {ticket_emoji}", inline=False)
                        elif not promocodes == 0:
                            embed.add_field(name=f"``#{idx}``. ~~–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ (ID: {user_id})~~",
                                            value=f"–ü—Ä–æ–º–æ–∫–æ–¥—ã: **{promocodes}** {ticket_emoji}", inline=False)

            await interaction.edit_original_message(embed=embed, view=self)

        async def previous_page(self, interaction: disnake.Interaction):
            await interaction.response.defer()  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–¥–µ—Å—å
            self.page -= 1
            if self.page <= 1:
                self.page = 1
                for child in self.children:
                    if isinstance(child, disnake.ui.Button) and child.custom_id == "previous":
                        child.disabled = True
            for child in self.children:
                if isinstance(child, disnake.ui.Button) and child.custom_id == "next":
                    child.disabled = False
            await self.update_embed(interaction)

        async def next_page(self, interaction: disnake.Interaction):
            await interaction.response.defer()  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–¥–µ—Å—å
            self.page += 1
            await self.update_embed(interaction)

    @commands.slash_command(name='top', description='–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
    @commands.cooldown(rate=1, per=15, type=commands.BucketType.user)
    async def top(self, inter: disnake.ApplicationCommandInteraction,
                  —Ç–∏–ø: TopEnum = commands.Param(description="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–ø–∞")):
        if disnake.InteractionResponse:
            await inter.response.defer(ephemeral=True)
        view = self.TopView(self, —Ç–∏–ø)
        await view.update_embed(inter)

def setup(bot):
    bot.add_cog(TopCog(bot))
    print('TopCog is ready')
